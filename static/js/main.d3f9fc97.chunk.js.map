{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","components/Chart/Chart.jsx","App.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","style","justifyContent","id","start","end","value","duration","delay","prefix","Date","toDateString","url","fetchCard","country","a","countryUrl","fetch","then","response","json","catch","error","console","log","fetchDaily","map","totalConfirmed","reportDate","total","fetchCountries","countries","name","CountryPicker","props","useState","countryData","setCountryData","useEffect","getData","optionFunction","key","textAlign","color","fontWeight","onChange","e","handleChange","target","Chart","selectCountries","selectConfirmed","selectDeaths","selectRecovered","setData","datas","BarChart","labels","datasets","backgroundColor","options","legend","display","title","text","LineChart","label","borderColor","fill","ReactGA","initialize","App","setState","textShadow","state","cardData","pageview","window","location","pathname","search","this","Component","ReactDOM","render","document","getElementById"],"mappings":"8QAuEeA,EApED,SAACC,GAAS,MAIlBA,EADFA,KAAQC,EAHY,EAGZA,UAAWC,EAHC,EAGDA,UAAWC,EAHV,EAGUA,OAAQC,EAHlB,EAGkBA,WAGxC,OAAKH,EAKH,yBAAKI,UAAU,kBACb,yBAAKA,UAAU,MAAMC,MAAO,CAAEC,eAAgB,WAC5C,yBAAKF,UAAU,kEACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAaG,GAAG,SAA9B,YAGA,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKT,EAAUU,MACfC,SAAU,EACVC,MAAO,EACPC,OAAO,oBACPT,UAAU,iBAEZ,uBAAGA,UAAU,aAAb,eACe,IAAIU,KAAKX,GAAYY,kBAIxC,yBAAKX,UAAU,kEACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,aACA,kBAAC,IAAD,CACEI,MAAO,EACPC,IAAKR,EAAUS,MACfC,SAAU,EACVC,MAAO,EACPC,OAAO,oBACPT,UAAU,iBAEZ,uBAAGA,UAAU,aAAb,eACe,IAAIU,KAAKX,GAAYY,kBAIxC,yBAAKX,UAAU,kEACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,UACA,kBAAC,IAAD,CACEI,MAAO,EACPC,IAAKP,EAAOQ,MACZC,SAAU,EACVC,MAAO,EACPC,OAAO,oBACPT,UAAU,gBAEZ,uBAAGA,UAAU,aAAb,eACe,IAAIU,KAAKX,GAAYY,oBApDrC,WCVLC,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBC,EAAaJ,EACbE,IACFE,EAAaJ,EAAM,cAAgBE,GAHd,SAMVG,MAAMD,GAChBE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACvB,GAGL,MAAO,CAAEC,UAF0CD,EAA7CC,UAEcC,UAF+BF,EAAlCE,UAEcC,OAFoBH,EAAvBG,OAEWC,WAFYJ,EAAfI,eAIrCsB,OAAM,SAACC,GAEN,MADAC,QAAQC,IAAIF,GACNA,KAjBa,mFAAH,sDAqBTG,EAAU,uCAAG,sBAAAV,EAAA,6DACXH,EAAM,SADK,SAGXK,MAFAL,wCAGVM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACvB,GACL,OAAOA,EAAK+B,KAAI,gBAAGC,EAAH,EAAGA,eAAgB7B,EAAnB,EAAmBA,OAAQ8B,EAA3B,EAA2BA,WAA3B,MAA6C,CAC3DD,iBACA7B,OAAQA,EAAO+B,MACfD,oBAGHP,OAAM,SAACC,GAEN,MADAC,QAAQC,IAAIF,GACNA,KAhBc,mFAAH,qDAoBVQ,EAAc,uCAAG,sBAAAf,EAAA,6DACfH,EAAM,aADS,SAGfK,MAFAL,4CAGVM,MAAK,SAACvB,GACL,OAAOA,EAAKyB,UAEbF,MAAK,YACJ,OADuB,EAAhBa,UACUL,KAAI,qBAAGM,WAEzBX,OAAM,SAACC,GAEN,MADAC,QAAQC,IAAIF,GACNA,KAZkB,mFAAH,qD,QCFZW,MApCf,SAAuBC,GAAQ,IAAD,EACUC,mBAAS,IADnB,mBACrBC,EADqB,KACRC,EADQ,KAE5BC,qBAAU,YACK,uCAAG,sBAAAvB,EAAA,kEACdsB,EADc,SACOP,IADP,6EAAH,qDAGbS,KACC,IAEH,IAAMC,EAAiBJ,EAAYV,KAAI,SAACZ,GACtC,OACE,4BAAQR,MAAOQ,EAAS2B,IAAK3B,GAC1BA,MAUP,OACE,0BAAMb,MAAO,CAAEyC,UAAW,WACxB,2BAAOzC,MAPG,CACZ0C,MAAO,OACPC,WAAY,SAKV,wBACA,4BACEC,SAAU,SAACC,GAAD,OAAOZ,EAAMa,aAAaD,EAAEE,OAAO1C,QAC7CN,UAAU,yBAEV,kDACCwC,K,QCwCMS,MArEf,SAAef,GAAQ,IAAD,EAKhBA,EAAMgB,gBAHGC,EAFO,EAElBvD,UACQwD,EAHU,EAGlBtD,OACWuD,EAJO,EAIlBxD,UAJkB,EAOIsC,mBAAS,IAPb,mBAObxC,EAPa,KAOP2D,EAPO,KASpBhB,qBAAU,YACK,uCAAG,4BAAAvB,EAAA,sEACIU,IADJ,OACV8B,EADU,OAEdD,EAAQC,GAFM,2CAAH,qDAIbhB,KACC,IAEH,IAAMiB,EAAWL,EACf,kBAAC,MAAD,CACExD,KAAM,CACJ8D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,gBAAiB,CACf,uBACA,uBACA,wBAEFhE,KAAM,CACJwD,EAAgB7C,MAChB+C,EAAgB/C,MAChB8C,EAAa9C,UAKrBsD,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsB9B,EAAMpB,aAG1D,KAEEmD,EAAYtE,EAAK,GACrB,kBAAC,OAAD,CACEA,KAAM,CACJ8D,OAAQ9D,EAAK+B,KAAI,qBAAGE,cACpB8B,SAAU,CACR,CACE/D,KAAMA,EAAK+B,KAAI,qBAAGC,kBAClBuC,MAAO,kBACPC,YAAa,0BAEf,CACExE,KAAMA,EAAK+B,KAAI,qBAAG5B,UAClBoE,MAAO,cACPC,YAAa,yBACbR,gBAAiB,UACjBS,MAAM,OAKZ,KAEJ,OAAO,yBAAKpE,UAAU,QAAQmD,EAAkBK,EAAWS,ICjE7DI,IAAQC,WAAW,kB,IAyDJC,E,kDAtDb,aAAe,IAAD,8BACZ,gBAiBFxB,aAlBc,uCAkBC,WAAOjC,GAAP,uBAAAC,EAAA,sEAMHF,EAAUC,GANP,gBAEAlB,EAFA,EAEXA,UACAE,EAHW,EAGXA,OACAC,EAJW,EAIXA,WACAF,EALW,EAKXA,UAGF,EAAK2E,SAAS,CACZ1D,QAASA,EACToC,gBAAiB,CAAEtD,UAAWA,EAAWE,SAAQC,aAAYF,eAVlD,2CAlBD,wDAgCdI,MAAQ,CACN0C,MAAO,QACP8B,WAAY,sBACZ7B,WAAY,QAjCZ,EAAK8B,MAAQ,CACXC,SAAU,GACVzB,gBAAiB,GACjBpC,QAAS,IAEXuD,IAAQO,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAPhD,E,gMAWKnE,I,OAAblB,E,OAEJsF,KAAKT,SAAS,CACZG,SAAUhF,I,qIAyBZ,OACE,yBAAKK,UAAU,aACb,wBAAIA,UAAU,aAAaC,MAAOgF,KAAKhF,OAAvC,oBAGA,kBAAC,EAAD,CAAON,KAAMsF,KAAKP,MAAMC,WACxB,kBAAC,EAAD,CAAe5B,aAAckC,KAAKlC,eAClC,kBAAC,EAAD,CACEjC,QAASmE,KAAKP,MAAM5D,QACpBoC,gBAAiB+B,KAAKP,MAAMxB,uB,GAjDpBgC,a,cCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d3f9fc97.chunk.js","sourcesContent":["import React from \"react\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Cards = (data) => {\r\n  // destructure data first. then destruct inner properties\r\n  let {\r\n    data: { confirmed, recovered, deaths, lastUpdate },\r\n  } = data;\r\n\r\n  if (!confirmed) {\r\n    return \"loading\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      <div className=\"row\" style={{ justifyContent: \"center\" }}>\r\n        <div className=\"card shadow bg-light col-md-3 mx-3 mb-3 rounded border-primary\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\" id=\"title\">\r\n              Infected\r\n            </h5>\r\n            <CountUp\r\n              start={0}\r\n              end={confirmed.value}\r\n              duration={3}\r\n              delay={1}\r\n              prefix=\"confirmed cases: \"\r\n              className=\"text-primary\"\r\n            />\r\n            <p className=\"card-text\">\r\n              LastUpdate: {new Date(lastUpdate).toDateString()}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card shadow bg-light col-md-3 mx-3 mb-3 rounded border-success\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Recovered</h5>\r\n            <CountUp\r\n              start={0}\r\n              end={recovered.value}\r\n              duration={3}\r\n              delay={1}\r\n              prefix=\"confirmed cases: \"\r\n              className=\"text-success\"\r\n            />\r\n            <p className=\"card-text\">\r\n              LastUpdate: {new Date(lastUpdate).toDateString()}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"card shadow  bg-light col-md-3 mx-3 mb-3 rounded border-danger\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Deaths</h5>\r\n            <CountUp\r\n              start={0}\r\n              end={deaths.value}\r\n              duration={3}\r\n              delay={1}\r\n              prefix=\"confirmed cases: \"\r\n              className=\"text-danger\"\r\n            />\r\n            <p className=\"card-text\">\r\n              LastUpdate: {new Date(lastUpdate).toDateString()}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","const url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchCard = async (country) => {\r\n  let countryUrl = url;\r\n  if (country) {\r\n    countryUrl = url + \"/countries/\" + country;\r\n  }\r\n\r\n  return await fetch(countryUrl)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      let { confirmed, recovered, deaths, lastUpdate } = data;\r\n\r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n      throw error;\r\n    });\r\n};\r\n\r\nexport const fetchDaily = async () => {\r\n  let newUrl = url + \"/daily\";\r\n\r\n  return await fetch(newUrl)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      return data.map(({ totalConfirmed, deaths, reportDate }) => ({\r\n        totalConfirmed,\r\n        deaths: deaths.total,\r\n        reportDate,\r\n      }));\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n      throw error;\r\n    });\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  let newUrl = url + \"/countries\";\r\n\r\n  return await fetch(newUrl)\r\n    .then((data) => {\r\n      return data.json();\r\n    })\r\n    .then(({ countries }) => {\r\n      return countries.map(({ name }) => name);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n      throw error;\r\n    });\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { fetchCountries } from \"../../api/index.js\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction CountryPicker(props) {\r\n  const [countryData, setCountryData] = useState([]);\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      setCountryData(await fetchCountries());\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  const optionFunction = countryData.map((country) => {\r\n    return (\r\n      <option value={country} key={country}>\r\n        {country}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  const style = {\r\n    color: \"grey\",\r\n    fontWeight: \"bold\",\r\n  };\r\n\r\n  return (\r\n    <form style={{ textAlign: \"center\" }}>\r\n      <label style={style}>Covid-19 Daily Stats</label>\r\n      <select\r\n        onChange={(e) => props.handleChange(e.target.value)}\r\n        className=\"custom-select mr-sm-2\"\r\n      >\r\n        <option>Daily stats...</option>\r\n        {optionFunction}\r\n      </select>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { fetchDaily } from \"../../api/index.js\";\r\n\r\nfunction Chart(props) {\r\n  let {\r\n    confirmed: selectConfirmed,\r\n    deaths: selectDeaths,\r\n    recovered: selectRecovered,\r\n  } = props.selectCountries;\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      let datas = await fetchDaily();\r\n      setData(datas);\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  const BarChart = selectConfirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [\r\n              selectConfirmed.value,\r\n              selectRecovered.value,\r\n              selectDeaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${props.country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const LineChart = data[0] ? (\r\n    <Line\r\n      data={{\r\n        labels: data.map(({ reportDate }) => reportDate),\r\n        datasets: [\r\n          {\r\n            data: data.map(({ totalConfirmed }) => totalConfirmed),\r\n            label: \"confirmed cases\",\r\n            borderColor: \"rgba(0, 123, 255, 0.7)\",\r\n          },\r\n          {\r\n            data: data.map(({ deaths }) => deaths),\r\n            label: \"death cases\",\r\n            borderColor: \"rgba(220, 53, 69, 0.7)\",\r\n            backgroundColor: \"#f4c2c2\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className=\"my-5\">{selectConfirmed ? BarChart : LineChart}</div>;\r\n  // return <div className=\"my-5\">{LineChart}</div>;\r\n}\r\n\r\nexport default Chart;\r\n","import ReactGA from \"react-ga\";\r\nimport React, { Component } from \"react\";\r\nimport Cards from \"./components/Cards/Cards.jsx\";\r\nimport { fetchCard } from \"./api/index.js\";\r\nimport CountryPicker from \"./components/CountryPicker/CountryPicker.jsx\";\r\nimport Chart from \"./components/Chart/Chart.jsx\";\r\nReactGA.initialize(\"UA-175814960-2\");\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cardData: {},\r\n      selectCountries: [],\r\n      country: \"\",\r\n    };\r\n    ReactGA.pageview(window.location.pathname + window.location.search);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let data = await fetchCard();\r\n\r\n    this.setState({\r\n      cardData: data,\r\n    });\r\n  }\r\n\r\n  handleChange = async (country) => {\r\n    let {\r\n      confirmed: confirmed,\r\n      deaths,\r\n      lastUpdate,\r\n      recovered,\r\n    } = await fetchCard(country);\r\n\r\n    this.setState({\r\n      country: country,\r\n      selectCountries: { confirmed: confirmed, deaths, lastUpdate, recovered },\r\n    });\r\n  };\r\n\r\n  style = {\r\n    color: \"white\",\r\n    textShadow: \"2px 2px 4px #000000\",\r\n    fontWeight: \"bold\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title mt-5\" style={this.style}>\r\n          Covid-19 Tracker\r\n        </h1>\r\n        <Cards data={this.state.cardData} />\r\n        <CountryPicker handleChange={this.handleChange} />\r\n        <Chart\r\n          country={this.state.country}\r\n          selectCountries={this.state.selectCountries}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}